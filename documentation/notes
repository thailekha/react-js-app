DESIGN DOCUMENT

To refactor:
-notice typeof null returns object !!!
-bind statements
-check if get methods need to return null

issues when bringing login function over from auth0 default app:
-node_modules/auth0-lock/lib/i18n.js: util module is somehow cannot be imported completely.
It is imported but has empty contents, typically no "format" function that is used. So this part is hardcoded

issues with auth0:
-same origin policy: configure "allow callback url" on auth0 account
-from the reactapp perspective a new account must be created. the auth0 account cannot be used here dummy !

issues with setting up testing framework (enzyme):
-Mocha does not understand "import"
-Mocha does not understand JSX
-when using "export default" then only "import" works, not "require", WTF ?
-Mocha tests are not run in browser, so localStorage is not available and needs simulating => npm dom-storage

babel's presets to use:
es2015: for import statements
react: for jsx
code for gen. JSON
http://www.objgen.com/json

json-server libraries.json --port 3001
libraries[0]
  id n = 0
  email = abc@yahoo.sample.com
  name = Sample repo 1
  public b = true
  paradigms[0]
    pdid n = 1
    name = Object-oriented
    details s = Object-oriented programming (OOP) is a programming paradigm based on the concept of "objects"
    subparadigms[] n = 2,3
  paradigms[1]
    pdid n = 2
    name = Actor-based
    details s = The actor model in computer science is a mathematical model of concurrent computation that treats "actors" as the universal primitives of concurrent computation
    subparadigms[] n
  paradigms[2]
    pdid n = 3
    name = Class-based
    details s = a style of object-oriented programming (OOP) in which inheritance is achieved by defining classes of objects
    subparadigms[] n
  programminglanguages[0]
    plid n = 1
    name = Java
    details = Java is a general-purpose computer programming language that is concurrent, class-based, object-oriented,and specifically designed to have as few implementation dependencies as possible
    type = compiled
  programminglanguages[1]
    plid n = 2
    name = Javascript
    details =  a high-level, dynamic, untyped, and interpreted programming language
    type = interpreted
  havings[0]
    pdid n = 1
    plid n = 1
  havings[1]
    pdid n = 1
    plid n = 2
libraries[1]
  id n = 1
  email = batman@yahoo.sample.com
  name = Sample repo 2
  public b = false
  paradigms[]
  programminglanguages[]
  havings[]
-------------------------------------------

ref:
https://en.wikipedia.org/wiki/Object-oriented_programming
https://en.wikipedia.org/wiki/Actor_model
https://en.wikipedia.org/wiki/Class-based_programming
https://en.wikipedia.org/wiki/JavaScript

https://nodejs.org/api/util.html#util_util_format_format_args
-------------------------------------------
tutorials:
https://www.youtube.com/watch?v=q0yKfFjlBbk&index=1&list=PLikcwtJj8_mDxWUJhYChFarCPnAwio24e