DESIGN DOCUMENT

-assigning (</>) to a variable makes it renderred anyway => explain homepage

SINON for next assignment

ASK: MAYBE A SILLY QUESTION BUT HOW MANY USER INTERACTION ASSUMED ?
eg. say you open up 2 tabs in browser, on 1 tab you view some items, on the other you create a new item.
Or if I fire an request to the server and it comes back late (after I have navigated to another component)
What would you recommend I should do for independent learning?

-jquery requries window and document => cannot use jquery in test

Decision: use both enzyme and nightwatchjs
nightwatch to test navigating to the page, do login, navigate around and logout
-make a mock object with libraryManager methods -> pass to the unit to test
shallow rendering -> check rendered elements | setState | simulateevent (test what is rendered, how state are changed and how inverse data flow is triggered)
-disable button if haven't change anything
-review previous commit to validate deleted "bind"
-static component (eg. navbars,profile,createboxes) => shouldcomponent update

Testing: make a library object to test each component7
-modes: keywords, phrases, starts with; if "..." -> no split; found highlight
-update paradigm -> check parent paradigm
-when deleting anything, if the routing on the item to be deleted, redirect the page !!!

add more typify.assert to the HTTP responses
-try-catch to remove faulty created library
-dataflow: children do parsing and convert to the proper type, send data up to container who passes on them to util who carries the core task

-choosing a type checking utility library again, requirements:
->declare type when declaring function
->throw error if type is not expected
-decision: typify

PATCH VS PUT ?

-CRUD for any model

-library CRUD methods are at container and passed down as inverse flow
-create locally & update the whole library (this includes delete the current library on the server)
vs update the library on the server (this includes changing the model eg. pl-id to pl_id and use filter request + many async requests)
->decision: locally & update the whole library. otherwise there will be many overhead with filtering and async, notice that json-server can only retrieve or filter a specific item from AN ARRAY
-all methods manipulating the library is centralized at container and passed down children as CRUD (planned to use context but not recommended by React)

-"filter" functionality for add paradigm createboxPL ?
-allow empty paradigms in createboxPL
-next: use the "having" to display more detailss
-issue with re-rendering createbox when switching browsing mode
-add paradigms: add parent and childparadigm
-switch button only switches the navigation bar

React does not allow any object with keys i.e. ID to be sent down the hierarchy as props

issue: -after signing up
-after creating a library

found issue: localStage was programmed to be cleared when response comes back -> token is cleared too
issue found in Browswpage.js: typeof localStorage === undefined is not the proper way to check if the frontend has localStorage. This was previously included to run test with enzyme where the browser is not used so localStorage is not available

implement lodash in util
if library is not available => no tabs
when logging in, check if localstorage already have library object that does not matches user's email, delete if available. Or just call it library + email

To refactor:
-use alert with empty input fields
-notice typeof null returns object !!!
-html header footer,graphviz
-uninstall wordnet ?
-first arg of some methods is number => to represent the chain of methods
eg. getX(1, ...) => first print out _getX...
 getY(3, ...) => print ___getY...
-use proptypes to ensure auth object is trustable, refer to Home.old.js
-is time required to be sync w auth0 server ? (laptop is UTC + 7)
-clear "libraryundefined" in localStorage
-webpack back to react-scripts
-id fields of library is string after retrieving from localstograge ?
-e.preventDefault
-this.setState(this.getInitialState()) (be careful)
-general validator: has attr (array of attrs), attr of expected type, range, size of array
-make a type for react component
-bind statements
-createPL: add PD => retrieve all subparadigms
-check if get methods need to return null
-duplicate havings
-duplicate pd or subpd being added
-void and not_logged_in in container (already defined in util?)

Old logout solution:
-pass auth to nav bar and logout directly from there, cannot use logout stub because cannot pass auth to a route
-cannot put nav bar in Container and shouldn't put it in each view component => create another "app" component

Dot graph:
 DOT Language

#EC7D78
#FFDA6E

graph{

Container[label="Container | state: profile, library",shape="rect",style="filled",color="red"];
BrowsepageContainer[style="filled",color="red"];

Homepage[shape="rect",style="filled",color="#AF002A"];
Browsepage[shape="rect",style="filled",color="#C46210'"];
Findpage[shape="rect",style="filled",color="#00C4B0"];
Profilepage[shape="rect",style="filled",color="#008000"];
CreateBoxPLorPD[shape="rect",style="filled",color="#6D9BC3"];
ContentPLorPD[shape="rect",style="filled",color="#CD607E"];

MyApp -- Router -- Container;
Container -- "Login (if not logged in)";
Container -- NavigationBar[color="magenta"];
Container -- Homepage[label="props: libraryManager",color="magenta"];
Container -- Browsepage[label="props: libraryManager",color="magenta"];
Container -- Findpage[label="props: libraryManager",color="magenta"];
Container -- Profilepage[color="magenta"];
Homepage -- Chart[label="props: libraryManager",color="magenta"];
Homepage -- Createbox;
Browsepage -- BrowsepageContainer[label="props: libraryManager",color="magenta"];
BrowsepageContainer -- SubNavigationBar[color="magenta"];
BrowsepageContainer -- CreateBoxPLorPD[label="props: libraryManager",color="magenta"];
BrowsepageContainer -- ContentPLorPD[label="props: libraryManager",color="magenta"];
Findpage -- SearchForm[label="props: libraryManager",color="magenta"];

}



--------------------------------------------------------------------------
***JavaScripts Function.prototype.apply***

"start": "cross-env NODE_ENV=development hjs-dev-server"
webpack config app.js -> index.js
review all the "join"s in webpack config

uninstall util
node's util module (check nodejs doc)
node-libs-browser -> sinon -> util
bug in an imported thing whose location cannot be accurately determined
-> completely remove it and see how it goes
---------------------------------------------------------------------
-enzyme: React is automated
-nightwatch: Userinteraction is automated

issues when bringing login function over from auth0 default app:
-node_modules/auth0-lock/lib/i18n.js: util module is somehow cannot be imported completely.
It is imported but has empty contents, typically no "format" function that is used. So this part is hardcoded

issues with auth0:
-same origin policy: configure "allow callback url" on auth0 account
-from the reactapp perspective a new account must be created. the auth0 account cannot be used here dummy !

issues with setting up testing framework (enzyme):
-Mocha does not understand "import"
-Mocha does not understand JSX
-when using "export default" then only "import" works, not "require", WTF ?
-Mocha tests are not run in browser, so localStorage is not available and needs simulating => npm dom-storage


babel's presets to use:
es2015: for import statements
react: for jsx
------------------------------------------
old package.json/"scripts":

"scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --env=jsdom",
    "eject": "react-scripts eject"
  }

------------------------------------------
component skeleton

import React from 'react';
import logger from '../logger'

var ProfilePage = React.createClass({
  /* ... options and lifecycle methods ... */
  render: function() {
    logger.reportRender('NavigationBar');
    return (

    );
  },
})
-------------------------------------------
json-server request bodies

/POST create new library

-------------------------------------------
code for gen. JSON
http://www.objgen.com/json

json-server libraries.json --port 3001


libraries[0]
  id n = 1
  email = abc@yahoo.sample.com
  name = Sample repo 1
  public b = true
  paradigms[0]
    pdid n = 1
    name = Object-oriented
    details s = Object-oriented programming (OOP) is a programming paradigm based on the concept of "objects"
    subparadigms[] n = 2,3
  paradigms[1]
    pdid n = 2
    name = Actor-based
    details s = The actor model in computer science is a mathematical model of concurrent computation that treats "actors" as the universal primitives of concurrent computation
    subparadigms[] n
  paradigms[2]
    pdid n = 3
    name = Class-based
    details s = a style of object-oriented programming (OOP) in which inheritance is achieved by defining classes of objects
    subparadigms[] n
  programminglanguages[0]
    plid n = 1
    name = Java
    details = Java is a general-purpose computer programming language that is concurrent, class-based, object-oriented,and specifically designed to have as few implementation dependencies as possible
    type = compiled
  programminglanguages[1]
    plid n = 2
    name = Javascript
    details =  a high-level, dynamic, untyped, and interpreted programming language
    type = interpreted
  havings[0]
    pdid n = 1
    plid n = 1
  havings[1]
    pdid n = 1
    plid n = 2
libraries[1]
  id n = 2
  email = batman@yahoo.sample.com
  name = Sample repo 2
  public b = false
-------------------------------------------

ref:
https://en.wikipedia.org/wiki/Object-oriented_programming
https://en.wikipedia.org/wiki/Actor_model
https://en.wikipedia.org/wiki/Class-based_programming
https://en.wikipedia.org/wiki/JavaScript

https://nodejs.org/api/util.html#util_util_format_format_args
-------------------------------------------
tutorials:
https://www.youtube.com/watch?v=q0yKfFjlBbk&index=1&list=PLikcwtJj8_mDxWUJhYChFarCPnAwio24e