To refactor:
-a button to report renders
-use proptypes to ensure auth object is trustable, refer to Home.old.js

Old logout solution:
-pass auth to nav bar and logout directly from there, cannot use logout stub because cannot pass auth to a route
-cannot put nav bar in Container and shouldn't put it in each view component => create another "app" component

Dot graph:
graph {
	Index -- MyApp -- Router -- Container -- Login;
	Container -- Homepage;
}
--------------------------------------------------------------------------
***JavaScripts Function.prototype.apply***

"start": "cross-env NODE_ENV=development hjs-dev-server"
webpack config app.js -> index.js
review all the "join"s in webpack config

uninstall util
node's util module (check nodejs doc)
node-libs-browser -> sinon -> util
bug in an imported thing whose location cannot be accurately determined
-> completely remove it and see how it goes

//Components
//import Landpage from './components/Landpage';
//import NavigationBar from './components/NavigationBar';
//import Homepage from './components/Homepage';
//import Browsepage from './components/Browsepage';
//import Profilepage from './components/Profilepage';
//import Findpage from './components/Findpage';

//<Landpage />
//<NavigationBar />
//<Homepage />
//<Browsepage />
//<Profilepage/>
//<Findpage/>
---------------------------------------------------------------------
-enzyme: React is automated
-nightwatch: Userinteraction is automated

issues when bringing login function over from auth0 default app:
-node_modules/auth0-lock/lib/i18n.js: util module is somehow cannot be imported completely.
It is imported but has empty contents, typically no "format" function that is used. So this part is hardcoded

issues with auth0:
-same origin policy: configure "allow callback url" on auth0 account
-from the reactapp perspective a new account must be created. the auth0 account cannot be used here dummy !

issues with setting up testing framework (enzyme):
-Mocha does not understand "import"
-Mocha does not understand JSX
-when using "export default" then only "import" works, not "require", WTF ?
-Mocha tests are not run in browser, so localStorage is not available and needs simulating => npm dom-storage


babel's presets to use:
es2015: for import statements
react: for jsx
------------------------------------------
old package.json/"scripts":

"scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --env=jsdom",
    "eject": "react-scripts eject"
  }

------------------------------------------
component skeleton

import React from 'react';
import logger from '../logger'

var ProfilePage = React.createClass({
  /* ... options and lifecycle methods ... */
  render: function() {
    logger.reportRender('NavigationBar');
    return (

    );
  },
})
-------------------------------------------
code for gen. JSON
http://www.objgen.com/json

json-server libraries.json --port 3001

session n = null
libraries[0]
  id n = 1
  name = Sample repo 1
  email = abc@yahoo.com
  password = aaaaa
  public b = true
  Paradigms[0]
    pID n = 1
    name = Object-oriented
    details s = Object-oriented programming (OOP) is a programming paradigm based on the concept of "objects"
    subParadigms[] n = 2,3
  Paradigms[1]
    pID n = 2
    name = Actor-based
    details s = The actor model in computer science is a mathematical model of concurrent computation that treats "actors" as the universal primitives of concurrent computation
    subParadigms[] n
  Paradigms[2]
    pID n = 3
    name = Class-based
    details s = a style of object-oriented programming (OOP) in which inheritance is achieved by defining classes of objects
    subParadigms[] n
  ProgrammingLanguages[0]
    pid n = 1
    name = Java
    details = Java is a general-purpose computer programming language that is concurrent, class-based, object-oriented,and specifically designed to have as few implementation dependencies as possible
    type = compiled
  ProgrammingLanguages[1]
    pid n = 2
    name = Javascript
    details =  a high-level, dynamic, untyped, and interpreted programming language
    type = interpreted
  Having[0]
    pID = 1
    pid = 1
  Having[1]
    pID = 1
    pid = 2
libraries[1]
  id n = 2
  name = Sample repo 2
  email = def@yahoo.com
  password = aaaaa
  public b = false
-------------------------------------------

ref:
https://en.wikipedia.org/wiki/Object-oriented_programming
https://en.wikipedia.org/wiki/Actor_model
https://en.wikipedia.org/wiki/Class-based_programming
https://en.wikipedia.org/wiki/JavaScript

https://nodejs.org/api/util.html#util_util_format_format_args
-------------------------------------------
tutorials:
https://www.youtube.com/watch?v=q0yKfFjlBbk&index=1&list=PLikcwtJj8_mDxWUJhYChFarCPnAwio24e