{
  "libraries": [
    {
      "id": 1,
      "email": "aaa@yahoo.com",
      "name": "sample library 2",
      "public": true,
      "paradigms": [
        {
          "pdid": 1,
          "name": "Actor-based",
          "details": "The actor model in computer science is a mathematical model of concurrent computation that treats \"actors\" as the universal primitives of concurrent computation. In response to a message that it receives, an actor can: make local decisions, create more actors, send more messages, and determine how to respond to the next message received.",
          "subparadigms": []
        },
        {
          "pdid": 2,
          "name": "Class-based",
          "details": "Class-based programming, or more commonly class-orientation, is a style of object-oriented programming (OOP) in which inheritance is achieved by defining classes of objects, as opposed to the objects themselves (compare prototype-based programming).",
          "subparadigms": []
        },
        {
          "pdid": 3,
          "name": "Concurrent",
          "details": "Concurrent object-oriented programming is a programming paradigm which combines object-oriented programming (OOP) together with concurrency",
          "subparadigms": []
        },
        {
          "pdid": 4,
          "name": "Object-oriented",
          "details": "Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods.",
          "subparadigms": [
            1,
            2,
            3
          ]
        }
      ],
      "programminglanguages": [
        {
          "plid": 1,
          "name": "Java",
          "details": "Java is a general-purpose computer programming language that is concurrent, class-based, object-oriented and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \"write once, run anywhere\" (WORA)",
          "type": "compiled"
        }
      ],
      "havings": [
        {
          "plid": 1,
          "pdid": 4
        },
        {
          "plid": 1,
          "pdid": 2
        },
        {
          "plid": 1,
          "pdid": 3
        }
      ]
    }
  ]
}